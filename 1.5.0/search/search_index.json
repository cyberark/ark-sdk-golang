{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ark SDK","text":"<p>The official Golang SDK and CLI for CyberArk's Identity Security Platform Services.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>Ark SDK, an API first library, is used to automate different sets of operations in order to ease day to day development. Ark provides a CLI for general purpose automation as well as a Golang SDK for code integration.</p>"},{"location":"#tldr","title":"TL;DR","text":""},{"location":"#enduser","title":"Enduser","text":""},{"location":"#license","title":"License","text":"<p>This project is licensed under Apache License 2.0 - see <code>LICENSE</code> for more details</p> <p>Copyright (c) 2025 CyberArk Software Ltd. All rights reserved.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>The library is designed as follows:</p> <p></p>"},{"location":"architecture/#design-perspectives","title":"Design Perspectives","text":"<p>The main components are:</p> <ul> <li>Profile: The profile defines a set of properties and information about the user's authentication methods. Profiles are persisted on the filesystem for subsequent actions.</li> <li>Authenticators: The integrations with specific authentication methods, which enable interaction with services. An authentication method can either be Identity (User/Service User) or a custom implementation.</li> <li>Services: The service providing functionality (requires one or more associated authenticators to perform actions). For example, the SIA service exposes SIA APIs in an secure manner.</li> <li>Services Model Schemes The models exposed by a service, which can be used to perform the service's actions.</li> <li>CLI Actions: CLI interface built on the SDK, which provides users with the following shell commands:<ul> <li><code>configure</code>: Configure a profile with authentication details</li> <li><code>login</code>: Log in with a configured profile authenticator</li> <li><code>exec</code>: Execute services actions</li> </ul> </li> </ul>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>You can install the SDK via go modules using the following command: <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre></p> <p>Make sure that the PATH environment variable points to the go binary path, for example: <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></p>"},{"location":"getting_started/#cli-usage","title":"CLI Usage","text":"<p>Both the SDK and the CLI support profiles, which can be configured as needed and used for consecutive actions.</p> <p>The CLI has the following basic commands:</p> <ul> <li>configure: Configure profiles and their authentication methods (see Configure)</li> <li>login: Log in using the configured profile authentication methods (see Login)</li> <li>exec: Execute commands for supported services (see Exec)</li> <li>profiles: Manage multiple profiles on the machine (see Profiles)</li> <li>cache: Manage ark cache on the machine (see Cache)</li> </ul>"},{"location":"getting_started/#basic-flow","title":"Basic flow","text":"<ol> <li> <p>Install Ark SDK and then configure a profile (either silently or interactively):     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></p> </li> <li> <p>After the profile is configured, log in:     <pre><code>ark login --silent --isp-secret mysecret\n</code></pre></p> </li> <li> <p>Execute actions (such as generating a short-lived SSO password):     <pre><code>ark exec sia sso short-lived-password\n</code></pre></p> </li> </ol>"},{"location":"license/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2025\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction,    and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by    the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all    other entities that control, are controlled by, or are under common    control with that entity. For the purposes of this definition,    \"control\" means (i) the power, direct or indirect, to cause the    direction or management of such entity, whether by contract or    otherwise, or (ii) ownership of fifty percent (50%) or more of the    outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity    exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,    including but not limited to software source code, documentation    source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical    transformation or translation of a Source form, including but    not limited to compiled object code, generated documentation,    and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or    Object form, made available under the License, as indicated by a    copyright notice that is included in or attached to the work    (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object    form, that is based on (or derived from) the Work and for which the    editorial revisions, annotations, elaborations, or other modifications    represent, as a whole, an original work of authorship. For the purposes    of this License, Derivative Works shall not include works that remain    separable from, or merely link (or bind by name) to the interfaces of,    the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including    the original version of the Work and any modifications or additions    to that Work or Derivative Works thereof, that is intentionally    submitted to Licensor for inclusion in the Work by the copyright owner    or by an individual or Legal Entity authorized to submit on behalf of    the copyright owner. For the purposes of this definition, \"submitted\"    means any form of electronic, verbal, or written communication sent    to the Licensor or its representatives, including but not limited to    communication on electronic mailing lists, source code control systems,    and issue tracking systems that are managed by, or on behalf of, the    Licensor for the purpose of discussing and improving the Work, but    excluding communication that is conspicuously marked or otherwise    designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity    on behalf of whom a Contribution has been received by Licensor and    subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of    this License, each Contributor hereby grants to You a perpetual,    worldwide, non-exclusive, no-charge, royalty-free, irrevocable    copyright license to reproduce, prepare Derivative Works of,    publicly display, publicly perform, sublicense, and distribute the    Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of    this License, each Contributor hereby grants to You a perpetual,    worldwide, non-exclusive, no-charge, royalty-free, irrevocable    (except as stated in this section) patent license to make, have made,    use, offer to sell, sell, import, and otherwise transfer the Work,    where such license applies only to those patent claims licensable    by such Contributor that are necessarily infringed by their    Contribution(s) alone or by combination of their Contribution(s)    with the Work to which such Contribution(s) was submitted. If You    institute patent litigation against any entity (including a    cross-claim or counterclaim in a lawsuit) alleging that the Work    or a Contribution incorporated within the Work constitutes direct    or contributory patent infringement, then any patent licenses    granted to You under this License for that Work shall terminate    as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the    Work or Derivative Works thereof in any medium, with or without    modifications, and in Source or Object form, provided that You    meet the following conditions:</p> </li> </ol> <p>(a) You must give any other recipients of the Work or    Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices    stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works    that You distribute, all copyright, patent, trademark, and    attribution notices from the Source form of the Work,    excluding those notices that do not pertain to any part of    the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its    distribution, then any Derivative Works that You distribute must    include a readable copy of the attribution notices contained    within such NOTICE file, excluding those notices that do not    pertain to any part of the Derivative Works, in at least one    of the following places: within a NOTICE text file distributed    as part of the Derivative Works; within the Source form or    documentation, if provided along with the Derivative Works; or,    within a display generated by the Derivative Works, if and    wherever such third-party notices normally appear. The contents    of the NOTICE file are for informational purposes only and    do not modify the License. You may add Your own attribution    notices within Derivative Works that You distribute, alongside    or as an addendum to the NOTICE text from the Work, provided    that such additional attribution notices cannot be construed    as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and    may provide additional or different license terms and conditions    for use, reproduction, or distribution of Your modifications, or    for any such Derivative Works as a whole, provided Your use,    reproduction, and distribution of the Work otherwise complies with    the conditions stated in this License.</p> <ol> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,    any Contribution intentionally submitted for inclusion in the Work    by You to the Licensor shall be under the terms and conditions of    this License, without any additional terms or conditions.    Notwithstanding the above, nothing herein shall supersede or modify    the terms of any separate license agreement you may have executed    with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade    names, trademarks, service marks, or product names of the Licensor,    except as required for reasonable and customary use in describing the    origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or    agreed to in writing, Licensor provides the Work (and each    Contributor provides its Contributions) on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or    implied, including, without limitation, any warranties or conditions    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A    PARTICULAR PURPOSE. You are solely responsible for determining the    appropriateness of using or redistributing the Work and assume any    risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,    whether in tort (including negligence), contract, or otherwise,    unless required by applicable law (such as deliberate and grossly    negligent acts) or agreed to in writing, shall any Contributor be    liable to You for damages, including any direct, indirect, special,    incidental, or consequential damages of any character arising as a    result of this License or out of the use or inability to use the    Work (including but not limited to damages for loss of goodwill,    work stoppage, computer failure or malfunction, or any and all    other commercial damages or losses), even if such Contributor    has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing    the Work or Derivative Works thereof, You may choose to offer,    and charge a fee for, acceptance of support, warranty, indemnity,    or other liability obligations and/or rights consistent with this    License. However, in accepting such obligations, You may act only    on Your own behalf and on Your sole responsibility, not on behalf    of any other Contributor, and only if You agree to indemnify,    defend, and hold each Contributor harmless for any liability    incurred by, or claims asserted against, such Contributor by reason    of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <pre><code> APPENDIX: How to apply the Apache License to your work.\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright \u00a9 2025 CyberArk Software Ltd</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"commands/cache/","title":"Cache","text":"<p>Use the <code>cache</code> command to manage the Ark data cached on your machine. Currently, you can only clear the filesystem cache (not data cached in the OS's keystore).</p>"},{"location":"commands/cache/#running","title":"Running","text":"<pre><code>ark cache\n</code></pre>"},{"location":"commands/cache/#usage","title":"Usage","text":"<pre><code>Manage cache\n\nUsage:\n  ark cache [command]\n\nAvailable Commands:\n  clear       Clears all profiles cache\n\nFlags:\n      --allow-output                Allow stdout / stderr even when silent and not interactive\n      --disable-cert-verification   Disables certificate verification on HTTPS calls, unsafe!\n  -h, --help                        help for cache\n      --log-level string            Log level to use while verbose (default \"INFO\")\n      --logger-style string         Which verbose logger style to use (default \"default\")\n      --raw                         Whether to raw output\n      --silent                      Silent execution, no interactiveness\n      --trusted-cert string         Certificate to use for HTTPS calls\n      --verbose                     Whether to verbose log\n\nUse \"ark cache [command] --help\" for more information about a command.\n</code></pre>"},{"location":"commands/configure/","title":"Configure command","text":"<p>The <code>configure</code> command is used to create a profile. Profiles define user and authentication information, such as which authentication methods to use, the method settings, and other information like MFA.</p> <p>Profiles are saved in the <code>~/.ark_profiles</code> folder.</p>"},{"location":"commands/configure/#run","title":"Run","text":"<pre><code>ark configure\n</code></pre> <p>When you run the command without arguments, you are prompted for the required information (alternatively, add the <code>--silent</code> flag with the required arguments).</p>"},{"location":"commands/configure/#usage","title":"Usage","text":"<pre><code>Configure the CLI\n\nUsage:\n  ark configure [flags]\n\nFlags:\n      --allow-output                                    Allow stdout / stderr even when silent and not interactive\n      --disable-cert-verification                       Disables certificate verification on HTTPS calls, unsafe!\n  -h, --help                                            help for configure\n      --isp-auth-method string                          Authentication method for Identity Security Platform (default \"default\")\n      --isp-identity-application string                 Identity Application\n      --isp-identity-authorization-application string   Service User Authorization Application\n      --isp-identity-mfa-interactive                    Allow Interactive MFA\n      --isp-identity-mfa-method string                  MFA Method to use by default [pf, sms, email, otp]\n      --isp-identity-tenant-subdomain string            Identity Tenant Subdomain\n      --isp-identity-url string                         Identity Url\n      --isp-username string                             Username\n      --log-level string                                Log level to use while verbose (default \"INFO\")\n      --logger-style string                             Which verbose logger style to use (default \"default\")\n      --profile-description string                      Profile Description\n      --profile-name string                             The name of the profile to use\n      --raw                                             Whether to raw output\n      --silent                                          Silent execution, no interactiveness\n      --trusted-cert string                             Certificate to use for HTTPS calls\n      --verbose                                         Whether to verbose log\n      --work-with-isp                                   Whether to work with Identity Security Platform services\n</code></pre>"},{"location":"commands/exec/","title":"Exec","text":"<p>Use the <code>exec</code> command to run commands on available services (the available services depend on the authorized user's account).</p>"},{"location":"commands/exec/#sia-services","title":"SIA services","text":"<p>The following SIA commands are supported:</p> <ul> <li><code>ark exec sia</code>: Root command for the SIA service (aliases: dpa)<ul> <li><code>sso</code> - SSO end-user operations</li> <li><code>k8s</code> - Kubernetes service</li> <li><code>db</code> - DB service</li> <li><code>workspaces</code> - Workspaces service</li> <li><code>target-sets</code> - Target sets operations</li> <li><code>db</code> - Database operations</li> <li><code>secrets</code> - Secrets service</li> <li><code>vm</code> - VM operations</li> <li><code>db</code> - Database operations</li> <li><code>access</code> - Access service</li> <li><code>ssh-ca</code> - SSH CA key service</li> </ul> </li> <li><code>ark exec cmgr</code>: Root command for the CMGR service (aliases: connectormanager,cm)</li> <li><code>ark exec pcloud</code>: Root command for PCloud service (aliases: privilegecloud,pc)<ul> <li><code>accounts</code> - Accounts management</li> <li><code>safes</code> - Safes management</li> </ul> </li> <li><code>ark exec identity</code>: Root command for the Identity service (aliases: idaptive,id)<ul> <li><code>directories</code> - Directories management</li> <li><code>users</code> - Users management</li> <li><code>roles</code> - Roles management</li> </ul> </li> <li><code>ark exec sechub</code>: Root command for the Secrets Hub Service (aliases: secretshub,sh)<ul> <li><code>configuration</code> - Configuration management</li> <li><code>service-info</code> - Service Info management</li> <li><code>secrets</code> - Secrets management</li> <li><code>scans</code> - Scans management</li> <li><code>secret-stores</code> - Secret Stores management</li> <li><code>sync-policies</code> - Sync Policies management</li> </ul> </li> <li><code>ark exec sm</code>: Root command for the SM service (aliases: sessionmonitoring)</li> <li><code>ark exec uap</code>: Root command for the UAP service (aliases: useraccesspolicies)<ul> <li><code>sca</code> - SCA management</li> <li><code>db</code> - SIA DB management</li> <li><code>vm</code> - SIA VM management</li> </ul> </li> </ul> <p>All commands have their own subcommands and respective arguments and aliases.</p>"},{"location":"commands/exec/#running","title":"Running","text":"<pre><code>ark exec\n</code></pre>"},{"location":"commands/exec/#usage","title":"Usage","text":"<pre><code>Exec an action\n\nUsage:\n  ark exec [command]\n\nAvailable Commands:\n  cmgr        (aliases: connectormanager, cm)\n  identity    (aliases: idaptive, id)\n  pcloud      (aliases: privilegecloud, pc)\n  sechub      (aliases: secretshub, sh)\n  sia         (aliases: dpa)\n  sm          (aliases: sessionmonitoring)\n  uap         (aliases: useraccesspolicies)\n\nFlags:\n      --allow-output                Allow stdout / stderr even when silent and not interactive\n      --disable-cert-verification   Disables certificate verification on HTTPS calls, unsafe!\n  -h, --help                        help for exec\n      --log-level string            Log level to use while verbose (default \"INFO\")\n      --logger-style string         Which verbose logger style to use (default \"default\")\n      --output-path string          Output file to write data to\n      --profile-name string         Profile name to load (default \"ark\")\n      --raw                         Whether to raw output\n      --refresh-auth                If a cache exists, will also try to refresh it\n      --request-file string         Request file containing the parameters for the exec action\n      --retry-count int             Retry count for execution (default 1)\n      --silent                      Silent execution, no interactiveness\n      --trusted-cert string         Certificate to use for HTTPS calls\n      --verbose                     Whether to verbose log\n\nUse \"ark exec [command] --help\" for more information about a command.\n</code></pre>"},{"location":"commands/login/","title":"Login","text":"<p>The <code>login</code> command is used to authenticate to Ark using the configured profile. When you run the command, you are prompted for the required login information (such as a password and MFA verifications).</p> <p>After you have logged in, the returned access tokens are stored in a secure location on your machine. After the tokens expire, a token refresh maybe attempted (see Refresh token) or a new login is required.</p>"},{"location":"commands/login/#run","title":"Run","text":"<pre><code>ark login\n</code></pre>"},{"location":"commands/login/#usage","title":"Usage","text":"<pre><code>Login to the system\n\nUsage:\n  ark login [flags]\n\nFlags:\n      --allow-output                Allow stdout / stderr even when silent and not interactive\n      --disable-cert-verification   Disables certificate verification on HTTPS calls, unsafe!\n      --force                       Whether to force login even though token has not expired yet\n  -h, --help                        help for login\n      --isp-secret string           Secret to authenticate with to Identity Security Platform\n      --isp-username string         Username to authenticate with to Identity Security Platform\n      --log-level string            Log level to use while verbose (default \"INFO\")\n      --logger-style string         Which verbose logger style to use (default \"default\")\n      --no-shared-secrets           Do not share secrets between different authenticators with the same username\n      --profile-name string         Profile name to load (default \"ark\")\n      --raw                         Whether to raw output\n      --refresh-auth                If a cache exists, will also try to refresh it\n      --show-tokens                 Print out tokens as well if not silent\n      --silent                      Silent execution, no interactiveness\n      --trusted-cert string         Certificate to use for HTTPS calls\n      --verbose                     Whether to verbose log\n</code></pre>"},{"location":"commands/profiles/","title":"Profiles","text":"<p>Use the <code>profiles</code> command to manage multiple users and tenants, and list all existing profiles. You can create, copy, modify, and delete profiles for different users and tenant.</p>"},{"location":"commands/profiles/#running","title":"Running","text":"<pre><code>ark profiles\n</code></pre>"},{"location":"commands/profiles/#usage","title":"Usage","text":"<pre><code>Manage profiles\n\nUsage:\n  ark profiles [command]\n\nAvailable Commands:\n  add         Add a profile from a given path\n  clear       Clear all profiles\n  clone       Clone a profile\n  delete      Delete a specific profile\n  edit        Edit a profile interactively\n  list        List all profiles\n  show        Show a profile\n\nFlags:\n      --allow-output                Allow stdout / stderr even when silent and not interactive\n      --disable-cert-verification   Disables certificate verification on HTTPS calls, unsafe!\n  -h, --help                        help for profiles\n      --log-level string            Log level to use while verbose (default \"INFO\")\n      --logger-style string         Which verbose logger style to use (default \"default\")\n      --raw                         Whether to raw output\n      --silent                      Silent execution, no interactiveness\n      --trusted-cert string         Certificate to use for HTTPS calls\n      --verbose                     Whether to verbose log\n\nUse \"ark profiles [command] --help\" for more information about a command.\n</code></pre>"},{"location":"examples/commands_examples/","title":"Commands examples","text":"<p>This page lists some useful CLI examples.</p> <p>Note</p> <p>You can disable certificate validation for login to an authenticator using the <code>--disable-certificate-verification</code> flag. This option is not recommended.</p> <p>Useful environment variables</p> <ul> <li><code>ARK_PROFILE</code>: Sets the profile to be used across the CLI</li> <li><code>ARK_DISABLE_CERTIFICATE_VERIFICATION</code>: Disables certificate verification for REST APIs</li> </ul>"},{"location":"examples/commands_examples/#configure-command-example","title":"Configure command example","text":"<p>The <code>configure</code> command works in interactive or silent mode. When using silent mode, the required parameters need to specified. Here's an example of configuring ISP in silent mode:</p> <pre><code>ark configure --profile-name=\"PROD\" --work-with-isp --isp-username=\"tina@cyberark.cloud.12345\" --silent --allow-output\n</code></pre>"},{"location":"examples/commands_examples/#login-commands-example","title":"Login commands example","text":"<p>The login command can work in interactive or silent mode. Here's an example of a silent login with the profile configured in the example above: <pre><code>ark login -s --isp-secret=CoolPassword\u00df --profile-name PROD\n</code></pre></p>"},{"location":"examples/commands_examples/#exec-command-examples","title":"Exec command examples","text":"<p>Use the <code>--help</code> flag to view all <code>exec</code> options.</p>"},{"location":"examples/commands_examples/#generate-a-short-lived-sso-password-for-a-database-connection","title":"Generate a short-lived SSO password for a database connection","text":"<pre><code>ark exec sia sso short-lived-password\n</code></pre>"},{"location":"examples/commands_examples/#generate-a-short-lived-sso-password-for-an-rdp-connection","title":"Generate a short-lived SSO password for an RDP connection","text":"<pre><code>ark exec sia sso short-lived-password --service DPA-RDP\n</code></pre>"},{"location":"examples/commands_examples/#generate-a-short-lived-sso-oracle-wallet-for-an-oracle-database-connection","title":"Generate a short-lived SSO Oracle wallet for an Oracle database connection","text":"<pre><code>ark exec sia sso short-lived-oracle-wallet --folder ~/wallet\n</code></pre>"},{"location":"examples/commands_examples/#generate-a-kubectl-config-file","title":"Generate a kubectl config file","text":"<pre><code>ark exec sia k8s generate-kubeconfig \n</code></pre>"},{"location":"examples/commands_examples/#generate-a-kubectl-config-file-and-save-it-in-the-specified-path","title":"Generate a kubectl config file and save it in the specified path","text":"<pre><code>ark exec sia k8s generate-kubeconfig --folder=/Users/My.User/.kube\n</code></pre>"},{"location":"examples/commands_examples/#add-sia-vm-target-set","title":"Add SIA VM target set","text":"<pre><code>ark exec sia workspaces target-sets add-target-set --name mydomain.com --type Domain\n</code></pre>"},{"location":"examples/commands_examples/#add-sia-vm-secret","title":"Add SIA VM secret","text":"<pre><code>ark exec sia secrets vm add-secret --secret-type ProvisionerUser --provisioner-username=myuser --provisioner-password=mypassword\n</code></pre>"},{"location":"examples/commands_examples/#generate-new-ssh-ca-key-version","title":"Generate new SSH CA key version","text":"<pre><code>ark exec sia ssh-ca generate-new-ca\n</code></pre>"},{"location":"examples/commands_examples/#deactivate-previous-ssh-ca-key-version","title":"Deactivate previous SSH CA key version","text":"<pre><code>ark exec sia ssh-ca deactivate-previous-ca\n</code></pre>"},{"location":"examples/commands_examples/#reactivate-previous-ssh-ca-key-version","title":"Reactivate previous SSH CA key version","text":"<pre><code>ark exec sia ssh-ca reactivate-previous-ca\n</code></pre>"},{"location":"examples/commands_examples/#list-cmgr-connector-pools","title":"List CMGR connector pools","text":"<pre><code>ark exec cmgr list-pools\n</code></pre>"},{"location":"examples/commands_examples/#add-cmgr-network","title":"Add CMGR network","text":"<pre><code>ark exec cmgr add-network --name mynetwork\n</code></pre>"},{"location":"examples/commands_examples/#add-cmgr-connector-pool","title":"Add CMGR connector pool","text":"<pre><code>ark exec cmgr add-pool --name mypool --assigned-network-ids mynetwork_id\n</code></pre>"},{"location":"examples/commands_examples/#get-connector-installation-script","title":"Get connector installation script","text":"<pre><code>ark exec sia access connector-setup-script --connector-type ON-PREMISE --connector-os windows --connector-pool-id 588741d5-e059-479d-b4c4-3d821a87f012\n</code></pre>"},{"location":"examples/commands_examples/#install-a-connector-on-windows-remotely","title":"Install a connector on windows remotely","text":"<pre><code>ark exec sia access install-connector --connector-pool-id 89b4f0ff-9b06-445a-9ca8-4ca9a4d72e8c --username myuser --password mypassword --target-machine 1.2.3.4 --connector-os windows --connector-type ON-PREMISE\n</code></pre>"},{"location":"examples/commands_examples/#install-a-connector-on-linux-with-private-key-remotely","title":"Install a connector on linux with private key remotely","text":"<pre><code>ark exec sia access install-connector --connector-pool-id 89b4f0ff-9b06-445a-9ca8-4ca9a4d72e8c --username myuser --private-key-path /path/to/private_key.pem --target-machine 1.2.3.4 --connector-os linux --connector-type ON-PREMISE\n</code></pre>"},{"location":"examples/commands_examples/#uninstall-a-connector-remotely","title":"Uninstall a connector remotely","text":"<pre><code>ark exec sia access uninstall-connector --connector-id CMSConnector_588741d5-e059-479d-b4c4-3d821a87f012_1a8b3734-8e1d-43a3-bb99-8a587609e653 --username myuser --password mypassword --target-machine 1.2.3.4 --connector-os windows\n</code></pre>"},{"location":"examples/commands_examples/#create-a-pcloud-safe","title":"Create a pCloud Safe","text":"<pre><code>ark exec pcloud safes add-safe --safe-name=safe\n</code></pre>"},{"location":"examples/commands_examples/#create-a-pcloud-account","title":"Create a pCloud account","text":"<pre><code>ark exec pcloud accounts add-account --name account --safe-name safe --platform-id='UnixSSH' --username root --address 1.2.3.4 --secret-type=password --secret mypass\n</code></pre>"},{"location":"examples/commands_examples/#retrieve-a-pcloud-account-credentials","title":"Retrieve a pCloud account credentials","text":"<pre><code>ark exec pcloud accounts get-account-credentials --account-id 11_1\n</code></pre>"},{"location":"examples/commands_examples/#create-an-identity-user","title":"Create an Identity user","text":"<pre><code>ark exec identity users create-user --roles \"DpaAdmin\" --username \"myuser\"\n</code></pre>"},{"location":"examples/commands_examples/#create-an-identity-role","title":"Create an Identity role","text":"<pre><code>ark exec identity roles create-role --role-name myrole\n</code></pre>"},{"location":"examples/commands_examples/#list-all-directories-identities","title":"List all directories identities","text":"<pre><code>ark exec identity directories list-directories-entities\n</code></pre>"},{"location":"examples/commands_examples/#add-sia-database-secret","title":"Add SIA database secret","text":"<pre><code>ark exec sia secrets db add-secret --secret-name mysecret --secret-type username_password --username user --password mypass\n</code></pre>"},{"location":"examples/commands_examples/#delete-sia-database-secret","title":"Delete SIA database secret","text":"<pre><code>ark exec sia secrets db delete-secret --secret-name mysecret\n</code></pre>"},{"location":"examples/commands_examples/#add-sia-database","title":"Add SIA database","text":"<pre><code>ark exec sia workspaces db add-database --name mydatabase --provider-engine aurora-mysql --read-write-endpoint myrds.com\n</code></pre>"},{"location":"examples/commands_examples/#delete-sia-database","title":"Delete SIA database","text":"<pre><code>ark exec sia workspaces db delete-database --id databaseid\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-configuration","title":"Get Secrets Hub Configuration","text":"<pre><code>ark exec sechub configuration get-configuration\n</code></pre>"},{"location":"examples/commands_examples/#set-secrets-hub-configuration","title":"Set Secrets Hub Configuration","text":"<pre><code>ark exec sechub configuration set-configuration --sync-settings 360\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-filters","title":"Get Secrets Hub Filters","text":"<pre><code>ark exec sechub filters get-filters --store-id store-e488dd22-a59c-418c-bbe3-3f061dd9b667\n</code></pre>"},{"location":"examples/commands_examples/#add-secrets-hub-filter","title":"Add Secrets Hub Filter","text":"<pre><code>ark exec sechub filters add-filter --type \"PAM_SAFE\" --store-id store-e488dd22-a59c-418c-bbe3-3f061dd9b667 --data-safe-name \"example-safe\"\n</code></pre>"},{"location":"examples/commands_examples/#delete-secrets-hub-filter","title":"Delete Secrets Hub Filter","text":"<pre><code>ark exec sechub filters delete-filter --filter-id filter-7f3d187d-7439-407f-b968-ec27650be692 --store-id store-e488dd22-a59c-418c-bbe3-3f061dd9b667\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-scans","title":"Get Secrets Hub Scans","text":"<pre><code>ark exec sechub scans get-scans\n</code></pre>"},{"location":"examples/commands_examples/#trigger-secrets-hub-scan","title":"Trigger Secrets Hub Scan","text":"<pre><code>ark exec sechub scans trigger-scan --id default --secret-stores-ids store-e488dd22-a59c-418c-bbe3-3f061dd9b667 type secret-store\n</code></pre>"},{"location":"examples/commands_examples/#create-secrets-hub-secret-store","title":"Create Secrets Hub Secret Store","text":"<pre><code>ark exec sechub secret-stores create-secret-store --type AWS_ASM --description sdk-testing --name \"SDK Testing\" --state ENABLED --data-aws-account-alias ALIAS-NAME-EXAMPLE --data-aws-region-id us-east-1 --data-aws-account-id 123456789123 --data-aws-rolename Secrets-Hub-IAM-Role-Name-Created-For-Secrets-Hub\n</code></pre>"},{"location":"examples/commands_examples/#retrieve-secrets-hub-secret-store","title":"Retrieve Secrets Hub Secret Store","text":"<pre><code>ark exec sechub secret-stores get-secret-store --secret-store-id store-e488dd22-a59c-418c-bbe3-3f061dd9b667\n</code></pre>"},{"location":"examples/commands_examples/#update-secrets-hub-secret-store","title":"Update Secrets Hub Secret Store","text":"<pre><code>ark exec sechub secret-stores update-secret-store --secret-store-id store-7f3d187d-7439-407f-b968-ec27650be692 --name \"New Name\" --description \"Updated Description\" --data-aws-account-alias \"Test2\"\n</code></pre>"},{"location":"examples/commands_examples/#delete-secrets-hub-secret-store","title":"Delete Secrets Hub Secret Store","text":"<pre><code>ark exec sechub secret-stores delete-secret-store --secret-store-id store-fd11bc7c-22d0-4d9b-ac1b-f8458161935f\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-secrets","title":"Get Secrets Hub Secrets","text":"<pre><code>ark exec sechub secrets get-secrets\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-secrets-using-a-filter","title":"Get Secrets Hub Secrets using a filter","text":"<pre><code>ark exec sechub secrets get-secrets-by --limit 5 --projection EXTEND --filter \"name CONTAINS EXAMPLE\"\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-service-information","title":"Get Secrets Hub Service Information","text":"<pre><code>ark exec sechub service-info get-service-info\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-sync-policies","title":"Get Secrets Hub Sync Policies","text":"<pre><code>ark exec sechub sync-policies get-sync-policies\n</code></pre>"},{"location":"examples/commands_examples/#get-secrets-hub-sync-policy","title":"Get Secrets Hub Sync Policy","text":"<pre><code>ark exec sechub sync-policies get-sync-policy --policy-id policy-7f3d187d-7439-407f-b968-ec27650be692 --projection EXTEND\n</code></pre>"},{"location":"examples/commands_examples/#create-secrets-hub-sync-policy","title":"Create Secrets Hub Sync Policy","text":"<pre><code>ark exec sechub sync-policies create-sync-policy --name \"New Sync Policy\" --description \"New Sync Policy Description\" --filter-type PAM_SAFE --filter-data-safe-name EXAMPLE-SAFE-NAME --source-id store-e488dd22-a59c-418c-bbe3-3f061dd12367 --target-id store-e488dd22-a59c-418c-bbe3-3f061dd9b667\n</code></pre>"},{"location":"examples/commands_examples/#delete-secrets-hub-sync-policy","title":"Delete Secrets Hub Sync Policy","text":"<pre><code>ark exec sechub sync-policies delete-sync-policy --policy-id policy-7f3d187d-7439-407f-b968-ec27650be692\n</code></pre>"},{"location":"examples/commands_examples/#list-sessions","title":"List Sessions","text":"<pre><code>ark exec sm list-sessions\n</code></pre>"},{"location":"examples/commands_examples/#count-sessions","title":"Count Sessions","text":"<pre><code>ark exec sm count-sessions\n</code></pre>"},{"location":"examples/commands_examples/#list-sessions-by-filter","title":"List Sessions By Filter","text":"<pre><code>ark exec sm list-sessions-by --search \"duration LE 01:00:00\"\n</code></pre>"},{"location":"examples/commands_examples/#count-sessions-by-filter","title":"Count Sessions By Filter","text":"<pre><code>ark exec sm count-sessions-by --search \"command STARTSWITH ls\"\n</code></pre>"},{"location":"examples/commands_examples/#get-session","title":"Get Session","text":"<pre><code>ark exec sm get-session --session-id my-id\n</code></pre>"},{"location":"examples/commands_examples/#list-session-activities","title":"List Session Activities","text":"<pre><code>ark exec sm list-session-activities --session-id my-id\n</code></pre>"},{"location":"examples/commands_examples/#count-session-activities","title":"Count Session Activities","text":"<pre><code>ark exec sm count-session-activities --session-id my-id\n</code></pre>"},{"location":"examples/commands_examples/#list-session-activities-by-filter","title":"List Session Activities By Filter","text":"<pre><code>ark exec sm list-session-activities-by --session-id my-id --command-contains \"ls\"\n</code></pre>"},{"location":"examples/commands_examples/#count-session-activities-by-filter","title":"Count Session Activities By Filter","text":"<pre><code>ark exec sm count-session-activities-by --session-id my-id --command-contains \"chmod\"\n</code></pre>"},{"location":"examples/commands_examples/#list-all-uap-policies","title":"List all UAP policies","text":"<pre><code>ark exec uap list-policies\n</code></pre>"},{"location":"examples/commands_examples/#delete-uap-db-policy","title":"Delete UAP DB Policy","text":"<pre><code>ark exec uap db delete-policy --policy-id my-policy-id\n</code></pre>"},{"location":"examples/commands_examples/#list-db-policies-from-uap","title":"List DB Policies from UAP","text":"<pre><code>ark exec uap db list-policies\n</code></pre>"},{"location":"examples/commands_examples/#get-db-policy-from-uap","title":"Get DB Policy from UAP","text":"<pre><code>ark exec uap db policy --policy-id my-policy-id\n</code></pre>"},{"location":"examples/commands_examples/#add-uap-db-policy","title":"Add UAP DB Policy","text":"<pre><code>ark exec uap db add-policy --request-file /path/to/policy-request.json\n</code></pre>"},{"location":"examples/commands_examples/#list-uap-sca-policies","title":"List UAP SCA Policies","text":"<pre><code>ark exec uap sca list-policies\n</code></pre>"},{"location":"examples/commands_examples/#get-uap-sca-policy","title":"Get UAP SCA Policy","text":"<pre><code>ark exec uap sca policy --policy-id my-policy-id\n</code></pre>"},{"location":"examples/commands_examples/#add-uap-sca-policy","title":"Add UAP SCA Policy","text":"<pre><code>ark exec uap sca add-policy --request-file /path/to/policy-request.json\n</code></pre>"},{"location":"examples/commands_examples/#delete-uap-sca-policy","title":"Delete UAP SCA Policy","text":"<pre><code>ark exec uap sca delete-policy --policy-id my-policy-id\n</code></pre>"},{"location":"examples/commands_examples/#list-vm-policies-from-uap","title":"List VM Policies from UAP","text":"<pre><code>ark exec uap vm list-policies\n</code></pre>"},{"location":"examples/commands_examples/#get-vm-policy-from-uap","title":"Get VM Policy from UAP","text":"<pre><code>ark exec uap vm policy --policy-id my-policy-id\n</code></pre>"},{"location":"examples/commands_examples/#delete-vm-policy-from-uap","title":"Delete VM Policy from UAP","text":"<pre><code>ark exec uap vm delete-policy --policy-id my-policy-id\n</code></pre>"},{"location":"examples/commands_examples/#connect-to-mysql-zsp-with-the-mysql-cli-via-ark-cli","title":"Connect to MySQL ZSP with the mysql cli via Ark CLI","text":"<pre><code>ark exec sia db mysql --target-address myaddress.com\n</code></pre>"},{"location":"examples/commands_examples/#connect-to-postgresql-vaulted-with-the-psql-cli-via-ark-cli","title":"Connect to PostgreSQL Vaulted with the psql cli via Ark CLI","text":"<pre><code>ark exec sia db psql --target-address myaddress.com --target-user myuser\n</code></pre>"},{"location":"examples/sdk_examples/","title":"SDK Examples","text":"<p>Using the SDK is similar to using the CLI.</p>"},{"location":"examples/sdk_examples/#short-lived-password-example","title":"Short-lived password example","text":"<p>In this example we authenticate to our ISP tenant and create a short-lived password:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    ssomodels \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/sso/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/sso\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // Create an SSO service from the authenticator above\n    ssoService, err := sso.NewArkSIASSOService(ispAuth)\n    if err != nil {\n        panic(err)\n    }\n\n    // Generate a short-lived password\n    ssoPassword, err := ssoService.ShortLivedPassword(\n        &amp;ssomodels.ArkSIASSOGetShortLivedPassword{},\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"%s\\n\", ssoPassword)\n\n    // Generate a short-lived password for RDP\n    ssoPassword, err = ssoService.ShortLivedPassword(\n        &amp;ssomodels.ArkSIASSOGetShortLivedPassword{\n            Service: \"DPA-RDP\",\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"%s\\n\", ssoPassword)\n}\n</code></pre>"},{"location":"examples/sdk_examples/#target-set-example","title":"Target set example","text":"<p>In this example we authenticate to our ISP tenant and create a target set with a VM secret:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    vmsecretsmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/secrets/vm/models\"\n    targetsetsmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/workspaces/targetsets/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/sia\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // Add a VM secret\n    siaAPI, err := sia.NewArkSIAAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    secret, err := siaAPI.SecretsVM().AddSecret(\n        &amp;vmsecretsmodels.ArkSIAVMAddSecret{\n            SecretType:          \"ProvisionerUser\",\n            ProvisionerUsername: \"CoolUser\",\n            ProvisionerPassword: \"CoolPassword\",\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    // Add VM target set\n    targetSet, err := siaAPI.WorkspacesTargetSets().AddTargetSet(\n        &amp;targetsetsmodels.ArkSIAAddTargetSet{\n            Name:       \"mydomain.com\",\n            Type:       \"Domain\",\n            SecretID:   secret.SecretID,\n            SecretType: secret.SecretType,\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Target set %s created\\n\", targetSet.Name)\n}\n</code></pre>"},{"location":"examples/sdk_examples/#cmgr-example","title":"CMGR example","text":"<p>In this example we authenticate to our ISP tenant and create a network, pool, and identifier:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    cmgrmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/cmgr/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/cmgr\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // Configure a network, pool and identifiers\n    cmgrService, err := cmgr.NewArkCmgrService(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    network, err := cmgrService.AddNetwork(&amp;cmgrmodels.ArkCmgrAddNetwork{Name: \"tlv\"})\n    if err != nil {\n        panic(err)\n    }\n    pool, err := cmgrService.AddPool(&amp;cmgrmodels.ArkCmgrAddPool{Name: \"tlvpool\", AssignedNetworkIDs: []string{network.NetworkID}})\n    if err != nil {\n        panic(err)\n    }\n    identifier, err := cmgrService.AddPoolIdentifier(&amp;cmgrmodels.ArkCmgrAddPoolSingleIdentifier{PoolID: pool.PoolID, Type: cmgrmodels.GeneralFQDN, Value: \"mymachine.tlv.com\"})\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Added pool: %s\\n\", pool.PoolID)\n    fmt.Printf(\"Added network: %s\\n\", network.NetworkID)\n    fmt.Printf(\"Added identifier: %s\\n\", identifier.IdentifierID)\n}\n</code></pre>"},{"location":"examples/sdk_examples/#list-pcloud-accounts","title":"List pCloud Accounts","text":"<p>In this example we authenticate to our ISP tenant and list pCloud accounts:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/pcloud\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // List all of the accounts\n    pcloudAPI, err := pcloud.NewArkPCloudAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    accountsChan, err := pcloudAPI.Accounts().ListAccounts()\n    if err != nil {\n        panic(err)\n    }\n    for accountsPage := range accountsChan {\n        for account := range accountsPage.Items {\n            fmt.Printf(\"Account: %v\\n\", account)\n        }\n    }\n}\n</code></pre>"},{"location":"examples/sdk_examples/#list-identities","title":"List identities","text":"<p>In this example we authenticate to our ISP tenant and list all of the accounts:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    directoriesmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/identity/directories/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/identity\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // List all identities\n    identityAPI, err := identity.NewArkIdentityAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    identitiesChan, err := identityAPI.Directories().ListDirectoriesEntities(&amp;directoriesmodels.ArkIdentityListDirectoriesEntities{})\n    if err != nil {\n        panic(err)\n    }\n    for loadedIdentity := range identitiesChan {\n        fmt.Printf(\"Identity: %v\\n\", loadedIdentity)\n    }\n}\n</code></pre>"},{"location":"examples/sdk_examples/#session-monitoring","title":"Session Monitoring","text":"<p>In this example we authenticate to our ISP tenant and get all the active sessions: <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/sm\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    SMAPI, err := sm.NewArkSMService(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    filter := &amp;ArkSMSessionsFilter{\n        Search: \"status IN Active\",\n    }\n    // Get all active sessions\n    activeSessions, err := SMAPI.CountSessionsBy(filter)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Total Active Sessions: %d\\n\", activeSessions)\n}\n</code></pre></p>"},{"location":"examples/sdk_examples/#uap","title":"UAP","text":"<p>In this example we authenticate to our ISP tenant and create a UAP DB policy: <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    commonmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/common\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/workspaces/db/models\"\n    commonuapmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/common/models\"\n    uapsia \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/common/models\"\n    uapdbmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/db/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/uap\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    uapAPI, err := uap.NewArkUAPAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    policy, err := uapAPI.Db().AddPolicy(\n        &amp;uapdbmodels.ArkUAPSIADBAccessPolicy{\n            ArkUAPSIACommonAccessPolicy: uapsia.ArkUAPSIACommonAccessPolicy{\n                ArkUAPCommonAccessPolicy: commonuapmodels.ArkUAPCommonAccessPolicy{\n                    Metadata: commonuapmodels.ArkUAPMetadata{\n                        Name:        \"Example DB Access Policy\",\n                        Description: \"This is an example of a DB access policy for SIA.\",\n                        Status: commonuapmodels.ArkUAPPolicyStatus{\n                            Status: commonuapmodels.StatusTypeActive,\n                        },\n                        PolicyEntitlement: commonuapmodels.ArkUAPPolicyEntitlement{\n                            TargetCategory: commonmodels.CategoryTypeDB,\n                            LocationType:   commonmodels.WorkspaceTypeFQDNIP,\n                            PolicyType:     commonuapmodels.PolicyTypeRecurring,\n                        },\n                        PolicyTags: []string{},\n                    },\n                    Principals: []commonuapmodels.ArkUAPPrincipal{\n                        {\n                            Type:                commonuapmodels.PrincipalTypeUser,\n                            ID:                  \"user-id\",\n                            Name:                \"user@cyberark.cloud.12345\",\n                            SourceDirectoryName: \"CyberArk\",\n                            SourceDirectoryID:   \"12345\",\n                        },\n                    },\n                },\n                Conditions: uapsia.ArkUAPSIACommonConditions{\n                    ArkUAPConditions: commonuapmodels.ArkUAPConditions{\n                        AccessWindow: commonuapmodels.ArkUAPTimeCondition{\n                            DaysOfTheWeek: []int{1, 2, 3, 4, 5},\n                            FromHour:      \"09:00\",\n                            ToHour:        \"17:00\",\n                        },\n                        MaxSessionDuration: 4,\n                    },\n                    IdleTime: 10,\n                },\n            },\n            Targets: map[string]uapdbmodels.ArkUAPSIADBTargets{\n                commonmodels.WorkspaceTypeFQDNIP: {\n                    Instances: []uapdbmodels.ArkUAPSIADBInstanceTarget{\n                        {\n                            InstanceName:         \"example-db-instance\",\n                            InstanceType:         db.FamilyTypeMSSQL,\n                            InstanceID:           \"1\",\n                            AuthenticationMethod: uapdbmodels.AuthMethodLDAPAuth,\n                            LDAPAuthProfile: &amp;uapdbmodels.ArkUAPSIADBLDAPAuthProfile{\n                                AssignGroups: []string{\"mygroup\"},\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Policy created successfully: %s\\n\", policy.Metadata.PolicyID)\n}\n</code></pre></p> <p>In this example we authenticate to our ISP tenant and create a UAP SIA VM policy: <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    commonmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/common\"\n    commonuapmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/common/models\"\n    uapsia \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/common/models\"\n    uapvmmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/vm/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/uap\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    uapAPI, err := uap.NewArkUAPAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    policy, err := uapAPI.Vm().AddPolicy(\n        &amp;uapvmmodels.ArkUAPSIAVMAccessPolicy{\n            ArkUAPSIACommonAccessPolicy: uapsia.ArkUAPSIACommonAccessPolicy{\n                ArkUAPCommonAccessPolicy: commonuapmodels.ArkUAPCommonAccessPolicy{\n                    Metadata: commonuapmodels.ArkUAPMetadata{\n                        Name:        \"Example VM Access Policy\",\n                        Description: \"This is an example of a VM access policy for SIA.\",\n                        Status: commonuapmodels.ArkUAPPolicyStatus{\n                            Status: commonuapmodels.StatusTypeActive,\n                        },\n                        PolicyEntitlement: commonuapmodels.ArkUAPPolicyEntitlement{\n                            TargetCategory: commonmodels.CategoryTypeVM,\n                            LocationType:   commonmodels.WorkspaceTypeFQDNIP,\n                            PolicyType:     commonuapmodels.PolicyTypeRecurring,\n                        },\n                        PolicyTags: []string{},\n                    },\n                    Principals: []commonuapmodels.ArkUAPPrincipal{\n                        {\n                            Type:                commonuapmodels.PrincipalTypeUser,\n                            ID:                  \"user-id\",\n                            Name:                \"user@cyberark.cloud.12345\",\n                            SourceDirectoryName: \"CyberArk\",\n                            SourceDirectoryID:   \"12345\",\n                        },\n                    },\n                },\n                Conditions: uapsia.ArkUAPSIACommonConditions{\n                    ArkUAPConditions: commonuapmodels.ArkUAPConditions{\n                        AccessWindow: commonuapmodels.ArkUAPTimeCondition{\n                            DaysOfTheWeek: []int{1, 2, 3, 4, 5},\n                            FromHour:      \"09:00\",\n                            ToHour:        \"17:00\",\n                        },\n                        MaxSessionDuration: 4,\n                    },\n                    IdleTime: 10,\n                },\n            },\n            Targets: uapvmmodels.ArkUAPSIAVMPlatformTargets{\n                FQDNIPResource: &amp;uapvmmodels.ArkUAPSIAVMFQDNIPResource{\n                    FQDNRules: []uapvmmodels.ArkUAPSIAVMFQDNRule{\n                        {\n                            Operator:            uapvmmodels.VMFQDNOperatorExactly,\n                            ComputernamePattern: \"example-vm\",\n                            Domain:              \"mydomain.com\",\n                        },\n                    },\n                },\n            },\n            Behavior: uapvmmodels.ArkUAPSSIAVMBehavior{\n                SSHProfile: &amp;uapvmmodels.ArkUAPSSIAVMSSHProfile{\n                    Username: \"root\",\n                },\n                RDPProfile: &amp;uapvmmodels.ArkUAPSSIAVMRDPProfile{\n                    LocalEphemeralUser: &amp;uapvmmodels.ArkUAPSSIAVMEphemeralUser{\n                        AssignGroups: []string{\"Remote Desktop Users\"},\n                    },\n                },\n            },\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Policy created successfully: %s\\n\", policy.Metadata.PolicyID)\n}\n</code></pre></p> <p>In this example we authenticate to our ISP tenant and create a UAP SCA policy: <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    commonmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/common\"\n    commonuapmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/common/models\"\n    uapscamodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sca/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/uap\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    uapAPI, err := uap.NewArkUAPAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    policy, err := uapAPI.Sca().AddPolicy(\n        &amp;uapscamodels.ArkUAPSCACloudConsoleAccessPolicy{\n            ArkUAPCommonAccessPolicy: commonuapmodels.ArkUAPCommonAccessPolicy{\n                Metadata: commonuapmodels.ArkUAPMetadata{\n                    Name:        \"Example SCA Access Policy\",\n                    Description: \"This is an example of a SCA access policy.\",\n                    Status: commonuapmodels.ArkUAPPolicyStatus{\n                        Status: commonuapmodels.StatusTypeValidating,\n                    },\n                    PolicyEntitlement: commonuapmodels.ArkUAPPolicyEntitlement{\n                        TargetCategory: commonmodels.CategoryTypeCloudConsole,\n                        LocationType:   commonmodels.WorkspaceTypeAWS,\n                        PolicyType:     commonuapmodels.PolicyTypeRecurring,\n                    },\n                    PolicyTags: []string{},\n                },\n                Principals: []commonuapmodels.ArkUAPPrincipal{\n                    {\n                        Type:                commonuapmodels.PrincipalTypeUser,\n                        ID:                  \"user-id\",\n                        Name:                \"user@cyberark.cloud.12345\",\n                        SourceDirectoryName: \"CyberArk\",\n                        SourceDirectoryID:   \"12345\",\n                    },\n                },\n            },\n            Conditions: uapscamodels.ArkUAPSCAConditions{\n                ArkUAPConditions: commonuapmodels.ArkUAPConditions{\n                    AccessWindow: commonuapmodels.ArkUAPTimeCondition{\n                        DaysOfTheWeek: []int{1, 2, 3, 4, 5},\n                        FromHour:      \"09:00:00\",\n                        ToHour:        \"17:00:00\",\n                    },\n                    MaxSessionDuration: 4,\n                },\n            },\n            Targets: uapscamodels.ArkUAPSCACloudConsoleTarget{\n                AwsAccountTargets: []uapscamodels.ArkUAPSCAAWSAccountTarget{\n                    {\n                        uapscamodels.ArkUAPSCATarget{\n                            RoleID:        \"arn:aws:iam::123456789012:role/ExampleRole\",\n                            RoleName:      \"ExampleRole\",\n                            WorkspaceID:   \"123456789012\",\n                            WorkspaceName: \"ExampleWorkspace\",\n                        },\n                    },\n                },\n            },\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Policy created successfully: %s\\n\", policy.Metadata.PolicyID)\n}\n</code></pre></p>"},{"location":"howto/enduser_databases_psql/","title":"End-user database Workflow","text":"<p>Here is an example workflow for connecting to a psql DB via ark CLI, which assumes a DB was already onboarded:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>Connect to postgres using the CLI with an MFA caching token behind the scenes:     <pre><code>ark exec sia db psql --target-address myaddress.com --target-user myuser\n</code></pre></li> </ol>"},{"location":"howto/enduser_databases_workflow/","title":"End-user database Workflow","text":"<p>Here is an example workflow for connecting to a database:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>Get a short-lived SSO password for a database from the SIA service:     <pre><code>ark exec sia sso short-lived-password\n</code></pre></li> <li>Log in directly to the database:     <pre><code>psql \"host=mytenant.postgres.cyberark.cloud user=user@cyberark.cloud.12345@postgres@mypostgres.fqdn.com\"\n</code></pre></li> </ol>"},{"location":"howto/enduser_kubernetes_workflow/","title":"End-user Kubernetes workflow","text":"<p>To securely access a Kubernetes cluster, do the following:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Configure a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>To generate a kubectl kubeconfig file, which defines the user's permissions and accessible clusters, do one of the following:<ul> <li>Run this command:     <pre><code>ark exec sia k8s generate-kubeconfig\n</code></pre></li> <li>Use the <code>-f</code> flag to generate the config file in the specified path (this option overrides existing files with the same name):     <pre><code>ark exec sia k8s generate-kubeconfig -f ~/.kube\n</code></pre></li> </ul> </li> </ol>"},{"location":"howto/enduser_kubernetes_workflow/#refresh-sso-certificate-workflow","title":"Refresh SSO certificate workflow","text":"<p>When you refresh the certificate, you can keep using its associated kubeconfig file and only need to refresh the MFA authentication data. To refresh the certificate, run one of the following:</p> <ul> <li>To generate two files (certificate and private key files), where the required <code>-f</code> flag defines the generated files' location:     <pre><code>ark exec sia sso short-lived-client-certificate -of file -f ~/home\n</code></pre></li> <li>To print the certificate and private key to the console as plaintext:     <pre><code>ark exec sia sso short-lived-client-certificate -of raw\n</code></pre></li> <li>To print the certificate and private key to the console as base64-encoded strings:     <pre><code>ark ark exec sia sso short-lived-client-certificate -of base64\n</code></pre></li> </ul>"},{"location":"howto/enduser_rdp_workflow/","title":"End-user RDP workflow","text":"<p>Here is an example workflow for connecting to a windows box using rdp:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the go binary path, for example    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>Get a short-lived SSO RDP file or password for a windows box from the SIA service:</li> <li>RDP file single usage for a windows box from the SIA service:        <pre><code>ark exec sia sso short-lived-rdp-file -ta targetaddress -td targetdomain -tu targetuser\n</code></pre></li> <li>Password for continous usage for a windows box from the SIA service:        <pre><code>ark exec sia sso short-lived-password --service DPA-RDP\n</code></pre></li> <li>Use the RDP file or password with mstsc or any other RDP client to connect</li> </ol>"},{"location":"howto/enduser_ssh_workflow/","title":"End-user SSH workflow","text":"<p>Here is an example workflow for connecting to a linux box using SSH:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>Get a short-lived SSH private key for a linux box from the SIA service:     <pre><code>ark exec sia sso short-lived-ssh-key\n</code></pre></li> <li>Log in directly to the linux box:     <pre><code>ssh -i ~/.ssh/sia_ssh_key.pem myuser@suffix@targetuser@targetaddress@sia_proxy\n</code></pre></li> </ol>"},{"location":"howto/install_sia_connectors/","title":"Install SIA connectors","text":"<p>Here is an example workflow for installing a connector on a linux or windows box:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>Create a network and connector pool:     <pre><code>ark exec cmgr add-network --name mynetwork\nark exec cmgr add-pool --name mypool --assigned-network-ids mynetwork_id\n</code></pre></li> <li>Install a connector:<ul> <li>Windows:        <pre><code>ark exec sia access install-connector --connector-pool-id 89b4f0ff-9b06-445a-9ca8-4ca9a4d72e8c --username myuser --password mypassword --target-machine 1.1.1.1 --connector-os windows --connector-type ON-PREMISE\n</code></pre></li> <li>Linux:        <pre><code>ark exec sia access install-connector --connector-pool-id 89b4f0ff-9b06-445a-9ca8-4ca9a4d72e8c --username myuser --private-key-path /path/to/private_key.pem --target-machine 1.1.1.1 --connector-os linux --connector-type ON-PREMISE\n</code></pre></li> </ul> </li> </ol>"},{"location":"howto/onboard_pcloud_account/","title":"Onboard pCloud Account","text":"<p>Here is an example workflow for onboarding a pCloud safe and creating a Safe:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>Create a new safe:     <pre><code>ark exec pcloud safes add-safe --safe-name=safe\n</code></pre></li> <li>Create a new account in the Safe:     <pre><code>ark exec pcloud accounts add-account --name account --safe-name safe --platform-id='UnixSSH' --username root --address 1.2.3.4 --secret-type=password --secret mypass\n</code></pre></li> </ol>"},{"location":"howto/refreshing_authentication/","title":"Refresh authentication","text":"<p>When you want to continue working with an existing authenticator, you can refresh the authentications. You can refresh authentications for the following:</p> <ul> <li>The login command</li> <li>The exec command</li> </ul>"},{"location":"howto/refreshing_authentication/#login-command","title":"Login command","text":"<p>To try to authenticate with an existing authenticator, use the <code>--refresh-auth</code> CLI flag:</p> <pre><code>ark login --refresh-auth\n</code></pre> <p>The <code>--refresh-auth</code> flag indicates that the user's profile authenticator should be refreshed and used for authentication. The user is only prompted for additional authentication values when the refresh fails.</p>"},{"location":"howto/refreshing_authentication/#exec-command","title":"Exec command","text":"<p>To try to run any command with an existing authenticator, use the <code>--refresh-auth</code> CLI flag: <pre><code>ark exec --refresh-auth sia sso short-lived-password\n</code></pre></p> <p>The <code>--refresh-auth</code> flag indicates that the user's profile authenticator should be refreshed and used before executing the command. When the refresh fails, an error is returned and you must log in again.</p>"},{"location":"howto/simple_commands_workflow/","title":"Simple commands workflow","text":"<p>Here's an example of how to:</p> <ol> <li>Configure a profile for logging in to a tenant</li> <li>Log in to the tenant</li> <li>Run a SIA action to configure a database secret and policy</li> </ol>"},{"location":"howto/simple_commands_workflow/#configure-profile-and-log-in","title":"Configure profile and log in","text":"<pre><code>ark configure --work-with-isp --isp-username=username\nark login -s --isp-secret=secret\n</code></pre>"},{"location":"howto/simple_commands_workflow/#generate-a-short-lived-password","title":"Generate a short lived password","text":"<pre><code>ark exec sia sso short-lived-password\n</code></pre>"},{"location":"howto/simple_sdk_workflow/","title":"Simple SDK Workflow","text":"<p>Here's an example tha shows how to generate a short-lived password for an SIA connection.</p>"},{"location":"howto/simple_sdk_workflow/#short-lived-password-example-code","title":"Short-lived password example code","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    ssomodels \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/sso/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/sso\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // Firstly, create an ISP authentication class\n    // Secondly, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // Create an SSO service from the authenticator above\n    ssoService, err := sso.NewArkSIASSOService(ispAuth)\n    if err != nil {\n        panic(err)\n    }\n\n    // Generate a short-lived password\n    ssoPassword, err := ssoService.ShortLivedPassword(\n        &amp;ssomodels.ArkSIASSOGetShortLivedPassword{},\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"%s\\n\", ssoPassword)\n}\n</code></pre>"},{"location":"howto/simple_sdk_workflow/#code-description","title":"Code description","text":"<p>The code example does this:</p> <ol> <li>Imports the required packages:<ul> <li>the <code>authmodels</code> package is used to authenticate to the platform</li> <li>the <code>ssomodels</code> package is used to generate a short-lived password.</li> </ul> </li> <li>Creates an instance of <code>ArkISPAuth</code>, which calls the <code>Authenticate</code> method to authenticate to the platform. The <code>Authenticate</code> method takes these parameters: username, authentication method, authentication method settings, and password.</li> <li>Creates an instance of <code>ArkSIASSOService</code> using the <code>ispAuth</code> authentication instance. The instance is named <code>ssoService</code>, and it is used to generate a short-lived password.</li> <li>Calls <code>ssoService</code> instance's <code>ShortLivedPassword</code> method to created a short-lived password, which is printed in the console.</li> </ol>"},{"location":"howto/working_with_ark_cache/","title":"Work with Ark cache","text":"<p>Both the CLI and SDK cache login information in the local machine's keystore or, when a keystore does not exist, in an encrypted folder (located in <code>$HOME/.ark_cache</code>). The cached information is used to run commands until the authentication tokens expire or are otherwise invalided.</p> <p>You can set the cache folder with the <code>ARK_KEYRING_FOLDER</code> env variable. To force Ark SDK to work only with the filesystem cache, use the <code>ARK_BASIC_KEYRING</code> environment variable</p> <p>If you want to ignore the cache when logging in, use the <code>-f</code> flag: <pre><code>ark login --force\n</code></pre></p> <p>To clear the cache, run <code>ark cache clear</code> or, when using an encrypted folder, remove the files from the <code>$HOME/.ark_cache</code> folder.</p>"},{"location":"howto/working_with_profiles/","title":"Work with profiles","text":"<p>Profiles define authentication methods for users. They are used with the CLI and, to a lesser extent, the SDK. Different profiles can be created and configured via the Ark <code>configure</code> command.</p> <p>You can specify which profile a command uses with the <code>--profile-name</code> flag or setting the <code>ARK_PROFILE</code> environment variable.</p> <p>Profiles are stored as JSON files in the <code>$HOME/.ark_profiles</code> folder.</p> <p>Note</p> <p>When there are multiple profiles configured but a profile is not specified in the command (via <code>--profile-name</code>) or with the <code>ARK_PROFILE</code> environment variable, the default <code>ark</code> profile is used.</p> <p>Here is an example profile file:</p> <pre><code>{\n    \"profile_name\": \"ark\",\n    \"profile_description\": \"Default Ark Profile\",\n    \"auth_profiles\": {\n        \"isp\": {\n            \"username\": \"tina@cyberark.cloud.1234567\",\n            \"auth_method\": \"identity\",\n            \"auth_method_settings\": {\n                \"identity_mfa_method\": \"email\",\n                \"identity_mfa_interactive\": true,\n                \"identity_application\": null,\n                \"identity_url\": null\n            }\n        }\n    }\n}\n</code></pre> <p>As well as using the CLI to manage profiles, you can create, modify, and delete profiles directly in the <code>$HOME/.ark_profiles</code> folder.</p>"},{"location":"howto/uap/uap_db_policy_cli_workflow/","title":"UAP database policy CLI workflow","text":"<p>Here is an example workflow for adding a UAP DB policy alongside all needed assets via the CLI:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li>Add SIA DB User Secret     <pre><code>ark exec sia secrets db add-secret --secret-name mysecret --secret-type username_password --username user --password mypass\n</code></pre></li> <li>Add SIA Database     <pre><code>ark exec sia workspaces db add-database \\\n  --name mydomain.com \\\n  --provider-engine postgres-sh \\\n  --read-write-endpoint myendpoint.mydomain.com \\\n  --secret-id &lt;SECRET_ID_FROM_PREVIOUS_STEP&gt;\n</code></pre></li> <li> <p>Create UAP DB Policy using a defined json file     <pre><code>{\n  \"metadata\": {\n    \"name\": \"Cool Policy\",\n    \"description\": \"Cool Policy Description\",\n    \"status\": { \"status\": \"ACTIVE\" },\n    \"timeFrame\": { \"fromTime\": null, \"toTime\": null },\n    \"policyEntitlement\": {\n      \"targetCategory\": \"DB\",\n      \"locationType\": \"FQDN_IP\",\n      \"policyType\": \"RECURRING\"\n    },\n    \"policyTags\": [\"cool_tag\", \"cool_tag2\"],\n    \"timeZone\": \"Asia/Jerusalem\"\n  },\n  \"principals\": [\n    {\n      \"id\": \"principal_id\",\n      \"name\": \"tester@cyberark.cloud\",\n      \"sourceDirectoryName\": \"CyberArk Cloud Directory\",\n      \"sourceDirectoryId\": \"source_directory_id\",\n      \"type\": \"USER\"\n    }\n  ],\n  \"conditions\": {\n    \"accessWindow\": {\n      \"daysOfTheWeek\": [0, 1, 2, 3, 4, 5, 6],\n      \"fromHour\": \"05:00\",\n      \"toHour\": \"23:59\"\n    },\n    \"maxSessionDuration\": 2,\n    \"idleTime\": 1\n  },\n  \"targets\": {\n    \"FQDN_IP\": {\n      \"instances\": [\n        {\n          \"instanceName\": \"Mongo-atlas_ephemeral_user\",\n          \"instanceType\": \"Mongo\",\n          \"instanceId\": \"1234\",\n          \"authenticationMethod\": \"MONGO_AUTH\",\n          \"mongoAuthProfile\": {\n            \"globalBuiltinRoles\": [\"readWriteAnyDatabase\"],\n            \"databaseBuiltinRoles\": {\n              \"mydb1\": [\"userAdmin\"],\n              \"mydb2\": [\"dbAdmin\"]\n            },\n            \"databaseCustomRoles\": {\n              \"mydb1\": [\"myCoolRole\"]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre></p> <pre><code>ark exec --request-file /path/to/policy-request.json uap db add-policy\n</code></pre> </li> </ol>"},{"location":"howto/uap/uap_db_policy_sdk_workflow/","title":"UAP database policy SDK workflow","text":"<p>Here is an example workflow for adding a UAP DB policy alongside all needed assets via the SDK:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    commonmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/common\"\n    dbsecretsmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/secrets/db/models\"\n    dbmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/sia/workspaces/db/models\"\n    commonuapmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/common/models\"\n    uapsia \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/common/models\"\n    uapdbmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/db/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/sia\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/uap\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    uapAPI, err := uap.NewArkUAPAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    siaAPI, err := sia.NewArkSIAAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n\n    secret, err := siaAPI.SecretsDB().AddSecret(\n        &amp;dbsecretsmodels.ArkSIADBAddSecret{\n            SecretType: \"username_password\",\n            Username:   \"CoolUser\",\n            Password:   \"CoolPassword\",\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"Secret ID:\", secret.SecretID)\n\n    // Add the database with the created secret\n    database, err := siaAPI.WorkspacesDB().AddDatabase(\n        &amp;dbmodels.ArkSIADBAddDatabase{\n            Name:              \"MyDatabase\",\n            ProviderEngine:    dbmodels.EngineTypeAuroraMysql,\n            ReadWriteEndpoint: \"myrds.com\",\n            SecretID:          secret.SecretID,\n        },\n    )\n\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Database: %v\\n\", database)\n\n    policy, err := uapAPI.Db().AddPolicy(\n        &amp;uapdbmodels.ArkUAPSIADBAccessPolicy{\n            ArkUAPSIACommonAccessPolicy: uapsia.ArkUAPSIACommonAccessPolicy{\n                ArkUAPCommonAccessPolicy: commonuapmodels.ArkUAPCommonAccessPolicy{\n                    Metadata: commonuapmodels.ArkUAPMetadata{\n                        Name:        \"Example DB Access Policy\",\n                        Description: \"This is an example of a DB access policy for SIA.\",\n                        Status: commonuapmodels.ArkUAPPolicyStatus{\n                            Status: commonuapmodels.StatusTypeActive,\n                        },\n                        PolicyEntitlement: commonuapmodels.ArkUAPPolicyEntitlement{\n                            TargetCategory: commonmodels.CategoryTypeDB,\n                            LocationType:   commonmodels.WorkspaceTypeFQDNIP,\n                            PolicyType:     commonuapmodels.PolicyTypeRecurring,\n                        },\n                        PolicyTags: []string{},\n                    },\n                    Principals: []commonuapmodels.ArkUAPPrincipal{\n                        {\n                            Type:                commonuapmodels.PrincipalTypeUser,\n                            ID:                  \"user-id\",\n                            Name:                \"user@cyberark.cloud.12345\",\n                            SourceDirectoryName: \"CyberArk\",\n                            SourceDirectoryID:   \"12345\",\n                        },\n                    },\n                },\n                Conditions: uapsia.ArkUAPSIACommonConditions{\n                    ArkUAPConditions: commonuapmodels.ArkUAPConditions{\n                        AccessWindow: commonuapmodels.ArkUAPTimeCondition{\n                            DaysOfTheWeek: []int{1, 2, 3, 4, 5},\n                            FromHour:      \"09:00\",\n                            ToHour:        \"17:00\",\n                        },\n                        MaxSessionDuration: 4,\n                    },\n                    IdleTime: 10,\n                },\n            },\n            Targets: map[string]uapdbmodels.ArkUAPSIADBTargets{\n                commonmodels.WorkspaceTypeFQDNIP: {\n                    Instances: []uapdbmodels.ArkUAPSIADBInstanceTarget{\n                        {\n                            InstanceName:         database.Name,\n                            InstanceType:         database.ProviderDetails.Family,\n                            InstanceID:           string(rune(database.ID)),\n                            AuthenticationMethod: uapdbmodels.AuthMethodDBAuth,\n                            DBAuthProfile: &amp;uapdbmodels.ArkUAPSIADBDBAuthProfile{\n                                Roles: []string{\"db_reader\", \"db_writer\"},\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Policy created successfully: %s\\n\", policy.Metadata.PolicyID)\n}\n</code></pre> <p>In the script above, the following actions are defined:</p> <ul> <li>The admin user is logged in to perform actions on the tenant</li> <li>we then configure SIA's secret, database and UAP DB policy</li> </ul>"},{"location":"howto/uap/uap_sca_policy_cli_workflow/","title":"UAP SCA policy CLI workflow","text":"<p>Here is an example workflow for adding a UAP SCA policy via the CLI:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li> <p>Create UAP SCA Policy using a defined json file     <pre><code>{\n  \"metadata\": {\n    \"name\": \"Cool Cloud Policy\",\n    \"description\": \"Cool Cloud Policy Description\",\n    \"policyTags\": [\n      \"cool_tag\",\n      \"cool_tag2\"\n    ],\n    \"policyEntitlement\": {\n      \"targetCategory\": \"Cloud console\",\n      \"locationType\": \"AWS\",\n      \"policyType\": \"Recurring\"\n    },\n    \"timeFrame\": {\n      \"fromTime\": null,\n      \"toTime\": null\n    },\n    \"status\": {\n      \"status\": \"Validating\",\n      \"statusCode\": null,\n      \"statusDescription\": \"Example status description\",\n      \"link\": null\n    }\n  },\n  \"principals\": [\n    {\n      \"id\": \"c2c7bcc6-9560-44e0-8dff-5be221cd37ee\",\n      \"name\": \"user@cyberark.cloud.12345\",\n      \"type\": \"User\",\n      \"sourceDirectoryName\": \"CyberArk Cloud Directory\",\n      \"sourceDirectoryId\": \"09B9A9B0-6CE8-465F-AB03-65766D33B05E\"\n    }\n  ],\n  \"conditions\": {\n    \"accessWindow\": {\n      \"daysOfTheWeek\": [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6\n      ],\n      \"fromHour\": \"05:00:00\",\n      \"toHour\": \"23:59:00\"\n    },\n    \"maxSessionDuration\": 2\n  },\n  \"delegationClassification\": \"Unrestricted\",\n  \"targets\": {\n    \"awsAccountTargets\": [\n      {\n        \"roleId\": \"arn:aws:iam::123456789012:role/RoleName\",\n        \"workspaceId\": \"123456789012\",\n        \"roleName\": \"RoleName\",\n        \"workspaceName\": \"WorkspaceName\"\n      }\n    ]\n  }\n}\n</code></pre></p> <pre><code>ark exec --request-file /path/to/policy-request.json uap sca add-policy\n</code></pre> </li> </ol>"},{"location":"howto/uap/uap_sca_policy_sdk_workflow/","title":"UAP SCA policy SDK workflow","text":"<p>Here is an example workflow for adding a UAP SCA policy assets via the SDK:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    commonmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/common\"\n    commonuapmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/common/models\"\n    uapscamodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sca/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/uap\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    uapAPI, err := uap.NewArkUAPAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    policy, err := uapAPI.Sca().AddPolicy(\n        &amp;uapscamodels.ArkUAPSCACloudConsoleAccessPolicy{\n            ArkUAPCommonAccessPolicy: commonuapmodels.ArkUAPCommonAccessPolicy{\n                Metadata: commonuapmodels.ArkUAPMetadata{\n                    Name:        \"Example SCA Access Policy\",\n                    Description: \"This is an example of a SCA access policy.\",\n                    Status: commonuapmodels.ArkUAPPolicyStatus{\n                        Status: commonuapmodels.StatusTypeValidating,\n                    },\n                    PolicyEntitlement: commonuapmodels.ArkUAPPolicyEntitlement{\n                        TargetCategory: commonmodels.CategoryTypeCloudConsole,\n                        LocationType:   commonmodels.WorkspaceTypeAWS,\n                        PolicyType:     commonuapmodels.PolicyTypeRecurring,\n                    },\n                    PolicyTags: []string{},\n                },\n                Principals: []commonuapmodels.ArkUAPPrincipal{\n                    {\n                        Type:                commonuapmodels.PrincipalTypeUser,\n                        ID:                  \"user-id\",\n                        Name:                \"user@cyberark.cloud.12345\",\n                        SourceDirectoryName: \"CyberArk\",\n                        SourceDirectoryID:   \"12345\",\n                    },\n                },\n            },\n            Conditions: uapscamodels.ArkUAPSCAConditions{\n                ArkUAPConditions: commonuapmodels.ArkUAPConditions{\n                    AccessWindow: commonuapmodels.ArkUAPTimeCondition{\n                        DaysOfTheWeek: []int{1, 2, 3, 4, 5},\n                        FromHour:      \"09:00:00\",\n                        ToHour:        \"17:00:00\",\n                    },\n                    MaxSessionDuration: 4,\n                },\n            },\n            Targets: uapscamodels.ArkUAPSCACloudConsoleTarget{\n                AwsAccountTargets: []uapscamodels.ArkUAPSCAAWSAccountTarget{\n                    {\n                        uapscamodels.ArkUAPSCATarget{\n                            RoleID:        \"arn:aws:iam::123456789012:role/ExampleRole\",\n                            RoleName:      \"ExampleRole\",\n                            WorkspaceID:   \"123456789012\",\n                            WorkspaceName: \"ExampleWorkspace\",\n                        },\n                    },\n                },\n            },\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Policy created successfully: %s\\n\", policy.Metadata.PolicyID)\n}\n</code></pre> <p>In the script above, the following actions are defined:</p> <ul> <li>The admin user is logged in to perform actions on the tenant</li> <li>we then configure UAP SCA policy</li> </ul>"},{"location":"howto/uap/uap_vm_policy_cli_workflow/","title":"UAP VM policy CLI workflow","text":"<p>Here is an example workflow for adding a UAP VM policy via the CLI:</p> <ol> <li>Install Ark SDK:    <pre><code>go install github.com/cyberark/ark-sdk-golang/cmd/ark@latest\n</code></pre>    Make sure that the PATH environment variable points to the Go binary. For example:    <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre></li> <li>Create a profile:<ul> <li>Interactively:     <pre><code>ark configure\n</code></pre></li> <li>Silently:     <pre><code>ark configure --silent --work-with-isp --isp-username myuser\n</code></pre></li> </ul> </li> <li>Log in to Ark:     <pre><code>ark login --silent --isp-secret &lt;my-ark-secret&gt;\n</code></pre></li> <li> <p>Create UAP VM Policy using a defined json file     <pre><code>{\n  \"metadata\": {\n    \"name\": \"Cool Policy\",\n    \"description\": \"Cool Policy Description\",\n    \"status\": {\n      \"status\": \"Active\",\n      \"statusDescription\": \"Example status description\"\n    },\n    \"timeFrame\": {\n      \"fromTime\": null,\n      \"toTime\": null\n    },\n    \"policyEntitlement\": {\n      \"targetCategory\": \"VM\",\n      \"locationType\": \"FQDN/IP\",\n      \"policyType\": \"Recurring\"\n    },\n    \"createdBy\": {\n      \"user\": \"cool_user\",\n      \"time\": \"2025-02-08T22:46:06\"\n    },\n    \"updatedOn\": {\n      \"user\": \"cool_user\",\n      \"time\": \"2025-02-08T22:46:06\"\n    },\n    \"policyTags\": [\n      \"cool_tag\",\n      \"cool_tag2\"\n    ],\n    \"timeZone\": \"Asia/Jerusalem\"\n  },\n  \"principals\": [\n    {\n      \"id\": \"principal_id\",\n      \"name\": \"tester@cyberark.cloud\",\n      \"type\": \"User\",\n      \"sourceDirectoryName\": \"CyberArk Cloud Directory\",\n      \"sourceDirectoryId\": \"source_directory_id\"\n    }\n  ],\n  \"delegationClassification\": \"Unrestricted\",\n  \"conditions\": {\n    \"accessWindow\": {\n      \"daysOfTheWeek\": [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6\n      ],\n      \"fromHour\": \"05:00\",\n      \"toHour\": \"23:59\"\n    },\n    \"maxSessionDuration\": 2,\n    \"idleTime\": 1\n  },\n  \"targets\": {\n    \"fqdnipResource\": {\n      \"fqdnRules\": [\n        {\n          \"operator\": \"EXACTLY\",\n          \"computernamePattern\": \"myvm.mydomain.com\",\n          \"domain\": \"domain.com\"\n        }\n      ],\n      \"ipRules\": [\n        {\n          \"operator\": \"EXACTLY\",\n          \"ipAddresses\": [\n            \"192.168.12.34\"\n          ],\n          \"logicalName\": \"CoolLogicalName\"\n        }\n      ]\n    }\n  },\n  \"behavior\": {\n    \"sshProfile\": {\n      \"username\": \"ssh_user\"\n    },\n    \"rdpProfile\": {\n      \"domainEphemeralUser\": {\n        \"assignGroups\": [\n          \"rdp_users\"\n        ],\n        \"enableEphemeralUserReconnect\": false,\n        \"assignDomainGroups\": [\n          \"domain_rdp_users\"\n        ]\n      }\n    }\n  }\n}\n</code></pre></p> <pre><code>ark exec --request-file /path/to/policy-request.json uap vm add-policy\n</code></pre> </li> </ol>"},{"location":"howto/uap/uap_vm_policy_sdk_workflow/","title":"UAP VM policy SDK workflow","text":"<p>Here is an example workflow for adding a UAP VM policy assets via the SDK:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    commonmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/common\"\n    commonuapmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/common/models\"\n    uapsia \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/common/models\"\n    uapvmmodels \"github.com/cyberark/ark-sdk-golang/pkg/services/uap/sia/vm/models\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/uap\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    uapAPI, err := uap.NewArkUAPAPI(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    policy, err := uapAPI.Vm().AddPolicy(\n        &amp;uapvmmodels.ArkUAPSIAVMAccessPolicy{\n            ArkUAPSIACommonAccessPolicy: uapsia.ArkUAPSIACommonAccessPolicy{\n                ArkUAPCommonAccessPolicy: commonuapmodels.ArkUAPCommonAccessPolicy{\n                    Metadata: commonuapmodels.ArkUAPMetadata{\n                        Name:        \"Example VM Access Policy\",\n                        Description: \"This is an example of a VM access policy for SIA.\",\n                        Status: commonuapmodels.ArkUAPPolicyStatus{\n                            Status: commonuapmodels.StatusTypeActive,\n                        },\n                        PolicyEntitlement: commonuapmodels.ArkUAPPolicyEntitlement{\n                            TargetCategory: commonmodels.CategoryTypeVM,\n                            LocationType:   commonmodels.WorkspaceTypeFQDNIP,\n                            PolicyType:     commonuapmodels.PolicyTypeRecurring,\n                        },\n                        PolicyTags: []string{},\n                    },\n                    Principals: []commonuapmodels.ArkUAPPrincipal{\n                        {\n                            Type:                commonuapmodels.PrincipalTypeUser,\n                            ID:                  \"user-id\",\n                            Name:                \"user@cyberark.cloud.12345\",\n                            SourceDirectoryName: \"CyberArk\",\n                            SourceDirectoryID:   \"12345\",\n                        },\n                    },\n                },\n                Conditions: uapsia.ArkUAPSIACommonConditions{\n                    ArkUAPConditions: commonuapmodels.ArkUAPConditions{\n                        AccessWindow: commonuapmodels.ArkUAPTimeCondition{\n                            DaysOfTheWeek: []int{1, 2, 3, 4, 5},\n                            FromHour:      \"09:00\",\n                            ToHour:        \"17:00\",\n                        },\n                        MaxSessionDuration: 4,\n                    },\n                    IdleTime: 10,\n                },\n            },\n            Targets: uapvmmodels.ArkUAPSIAVMPlatformTargets{\n                FQDNIPResource: &amp;uapvmmodels.ArkUAPSIAVMFQDNIPResource{\n                    FQDNRules: []uapvmmodels.ArkUAPSIAVMFQDNRule{\n                        {\n                            Operator:            uapvmmodels.VMFQDNOperatorExactly,\n                            ComputernamePattern: \"example-vm\",\n                            Domain:              \"mydomain.com\",\n                        },\n                    },\n                },\n            },\n            Behavior: uapvmmodels.ArkUAPSSIAVMBehavior{\n                SSHProfile: &amp;uapvmmodels.ArkUAPSSIAVMSSHProfile{\n                    Username: \"root\",\n                },\n                RDPProfile: &amp;uapvmmodels.ArkUAPSSIAVMRDPProfile{\n                    LocalEphemeralUser: &amp;uapvmmodels.ArkUAPSSIAVMEphemeralUser{\n                        AssignGroups: []string{\"Remote Desktop Users\"},\n                    },\n                },\n            },\n        },\n    )\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Policy created successfully: %s\\n\", policy.Metadata.PolicyID)\n}\n</code></pre> <p>In the script above, the following actions are defined:</p> <ul> <li>The admin user is logged in to perform actions on the tenant</li> <li>we then configure UAP VM policy</li> </ul>"},{"location":"sdk/authenticators/","title":"Authenticators","text":"<p>An authenticator provides the ability to authenticate to a CyberArk Identity Security Platform (ISP) resource. The authentication is based on authentication profiles, where the authentication profile defines the authentication method and its associated settings.</p> <p>Here's an example of how to initialize and use an authenticator:</p> <pre><code>package main\n\nimport (\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n)\n\nfunc main() {\n    ispAuth := auth.NewArkISPAuth(false)\n}\n</code></pre> <p>Note</p> <p>When you call the constructor, you can determine whether or not the authentication credentials are cached.</p> <p>Authenticators have a base authenticate method that receives a profile as an input and returns an auth token. Additionally, the ArkISPAuth class exposes functions to retrieve a profile's authentication methods and settings. Although the returned token can be used as a return value, it can normally be ignored as it is saved internally.</p> <p>These are the different types of authenticator types and auth methods:</p>"},{"location":"sdk/authenticators/#authenticator-types","title":"Authenticator types","text":"<p>Currently, ArkISPAuth is the only supported authenticator type, which is derived from the ArkAuth interface and accepts the <code>Identity</code> (default) and <code>IdentityServiceUser</code> auth methods.</p>"},{"location":"sdk/authenticators/#auth-methods","title":"Auth methods","text":"<ul> <li>Identity (<code>identity</code>) - Identity authentication to a tenant or to an application within the Identity tenant, used with the IdentityArkAuthMethodSettings class</li> <li>IdentityServiceUser (<code>identity_service_user</code>) - Identity authentication with a service user, used with IdentityServiceUserArkAuthMethodSettings class</li> <li>Direct (<code>direct</code>) - Direct authentication to an endpoint, used with the DirectArkAuthMethodSettings class</li> <li>Default (<code>default</code>) - Default authenticator auth method for the authenticator</li> <li>Other (<code>other</code>) - For custom implementations</li> </ul> <p>See ark_auth_method.go for more information about auth methods.</p>"},{"location":"sdk/authenticators/#sdk-authenticate-example","title":"SDK authenticate example","text":"<p>Here is an example authentication flow that implements the ArkISPAuth class:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/identity\"\n    \"os\"\n)\n\nfunc main() {\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n    identityAPI, err := identity.NewArkIdentityAPI(ispAuth.(*auth.ArkISPAuth))\n}\n</code></pre> <p>The example above initializes an instance of the ArkISPAuth class and authenticates to the specified ISP tenant, using the <code>Identity</code> authentication type with the provided username and password.</p> <p>The <code>authenticate</code> method returns a token, which can usually be ignored because it is stored internally.</p> <p>After authenticating, the authenticator can be used to access the required services.</p>"},{"location":"sdk/pagination/","title":"Pagination","text":"<p>When a response returns many items or is paginated, the response contains a page channel instead of all the items. This ensures fast response times and the ability to just retrieve a required subset of items.</p> <p>Responses that do return paginated results contain an item channel, that will emit pages of items.</p>"},{"location":"sdk/schemas/","title":"Schemas","text":"<p>Ark SDK is entirely based on schemas constructed from standard Golang structs, along with the tagging of <code>json</code> and <code>mapstructure</code> values for serialization.</p> <p>All <code>exec</code> actions in the Ark SDK receive a model parsed from the CLI or SDK in code and, some of them, return a model or set of models.</p>"},{"location":"sdk/schemas/#example","title":"Example","text":"<p>Any request can be called with a defined model, for example:</p> <pre><code>secret, err := siaAPI.SecretsVM().AddSecret(\n    &amp;vmsecretsmodels.ArkSIAVMAddSecret{\n        SecretType:          \"ProvisionerUser\",\n        ProvisionerUsername: \"CoolUser\",\n        ProvisionerPassword: \"CoolPassword\",\n    },\n)\n</code></pre> <p>The above example creates a VM secret service and calls <code>AddSecret()</code> to add a new VM secret. The add secret schema is passed, and a result schema for the secret is returned:</p> <pre><code>// ArkSIAVMSecret represents a secret in the Ark SIA VM.\ntype ArkSIAVMSecret struct {\n    SecretID      string                 `json:\"secret_id\" mapstructure:\"secret_id\" flag:\"secret-id\" desc:\"ID of the secret\"`\n    TenantID      string                 `json:\"tenant_id,omitempty\" mapstructure:\"tenant_id,omitempty\" flag:\"tenant-id\" desc:\"Tenant ID of the secret\"`\n    Secret        ArkSIAVMSecretData     `json:\"secret,omitempty\" mapstructure:\"secret,omitempty\" flag:\"secret\" desc:\"Secret itself\"`\n    SecretType    string                 `json:\"secret_type\" mapstructure:\"secret_type\" flag:\"secret-type\" desc:\"Type of the secret\" choices:\"ProvisionerUser,PCloudAccount\"`\n    SecretDetails map[string]interface{} `json:\"secret_details\" mapstructure:\"secret_details\" flag:\"secret-details\" desc:\"Secret extra details\"`\n    IsActive      bool                   `json:\"is_active\" mapstructure:\"is_active\" flag:\"is-active\" desc:\"Whether this secret is active or not and can be retrieved or modified\"`\n    IsRotatable   bool                   `json:\"is_rotatable\" mapstructure:\"is_rotatable\" flag:\"is-rotatable\" desc:\"Whether this secret can be rotated\"`\n    CreationTime  string                 `json:\"creation_time\" mapstructure:\"creation_time\" flag:\"creation-time\" desc:\"Creation time of the secret\"`\n    LastModified  string                 `json:\"last_modified\" mapstructure:\"last_modified\" flag:\"last-modified\" desc:\"Last time the secret was modified\"`\n    SecretName    string                 `json:\"secret_name,omitempty\" mapstructure:\"secret_name,omitempty\" flag:\"secret-name\" desc:\"A friendly name label\"`\n}\n</code></pre> <p>All models can be found here, and are separated into folders according to type.</p>"},{"location":"sdk/services/","title":"Services","text":"<p>SDK services are defined to execute requests on available ISP services (such as SIA). When a service is initialized, a valid authenticator is required to authorize access to the ISP service. To perform service actions, each service exposes a set of classes and methods.</p> <p>Here's an example that initializes the <code>ArkCmgrService</code> service:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/auth\"\n    authmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/auth\"\n    cmgrmodels \"github.com/cyberark/ark-sdk-golang/pkg/models/services/cmgr\"\n    \"github.com/cyberark/ark-sdk-golang/pkg/services/cmgr\"\n    \"os\"\n)\n\nfunc main() {\n    // Perform authentication using ArkISPAuth to the platform\n    // First, create an ISP authentication class\n    // Afterwards, perform the authentication\n    ispAuth := auth.NewArkISPAuth(false)\n    _, err := ispAuth.Authenticate(\n        nil,\n        &amp;authmodels.ArkAuthProfile{\n            Username:           \"user@cyberark.cloud.12345\",\n            AuthMethod:         authmodels.Identity,\n            AuthMethodSettings: &amp;authmodels.IdentityArkAuthMethodSettings{},\n        },\n        &amp;authmodels.ArkSecret{\n            Secret: os.Getenv(\"ARK_SECRET\"),\n        },\n        false,\n        false,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // Configure a network, pool and identifiers\n    cmgrService, err := cmgr.NewArkCmgrService(ispAuth.(*auth.ArkISPAuth))\n    if err != nil {\n        panic(err)\n    }\n    network, err := cmgrService.AddNetwork(&amp;cmgrmodels.ArkCmgrAddNetwork{Name: \"tlv\"})\n    if err != nil {\n        panic(err)\n    }\n    pool, err := cmgrService.AddPool(&amp;cmgrmodels.ArkCmgrAddPool{Name: \"tlvpool\", AssignedNetworkIDs: []string{network.ID}})\n    if err != nil {\n        panic(err)\n    }\n    identifier, err := cmgrService.AddPoolIdentifier(&amp;cmgrmodels.ArkCmgrAddPoolSingleIdentifier{PoolID: pool.ID, Type: cmgrmodels.GeneralFQDN, Value: \"mymachine.tlv.com\"})\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Added pool: %s\\n\", pool.ID)\n    fmt.Printf(\"Added network: %s\\n\", network.ID)\n    fmt.Printf(\"Added identifier: %s\\n\", identifier.ID)\n}\n</code></pre> <p>The above example authenticates to the specified ISP tenant, initializes a CMGR service using the authorized authenticator, and then uses the service to add a network and pool.</p>"},{"location":"sdk/services/#secure-infrastructure-access-service","title":"Secure Infrastructure Access service","text":"<p>The Secure Infrastructure Access (sia) service requires the ArkISPAuth authenticator, and exposes these service classes:</p> <ul> <li>ArkSIAAccessService (access) - SIA access service</li> <li>ArkSIASSHCAService (ssh-ca) - SIA SSH CA Key service</li> <li>ArkSIAK8SService (Kubernetes) - SIA end-user Kubernetes service</li> <li>ArkSIADBService (Db) - SIA end-user Db service</li> <li>ArkSIASecretsService (secrets) - SIA secrets management<ul> <li>ArkSIAVMSecretsService (VM) - SIA VM secrets services</li> <li>ArkSIADBSecretsService (DB) - SIA DB secrets services</li> </ul> </li> <li>ArkSIASSOService (SSO) - SIA end-user SSO service</li> <li>ArkSIADatabasesService (databases) - SIA end-user databases service</li> <li>ArkSIAWorkspacesService (workspaces) - SIA workspaces management<ul> <li>ArkSIATargetSetsWorkspaceService (target-sets) - SIA Target Sets workspace management</li> <li>ArkSIADBWorkspaceService (db) - SIA DB workspace management</li> </ul> </li> <li>ArkSIASSHCAService (ssh-ca) - SIA SSH CA Key service</li> </ul>"},{"location":"sdk/services/#identity-service","title":"Identity service","text":"<p>The Identity (identity) service requires the ArkISPAuth authenticator, and exposes those service classes:</p> <ul> <li>ArkIdentityRolesService - Identity roles service</li> <li>ArkIdentityUsersService - Identity users service</li> <li>ArkIdentityDirectoriesService - Identity directories service</li> </ul>"},{"location":"sdk/services/#privilege-cloud-service","title":"Privilege Cloud service","text":"<p>The Privilege Cloud (pCloud) service requires the ArkISPAuth authenticator, and exposes those service classes:</p> <ul> <li>ArkPCloudAccountsService - Accounts management service</li> <li>ArkPCloudSafesService - Safes management service</li> </ul>"},{"location":"sdk/services/#connector-manager-service","title":"Connector Manager Service","text":"<p>The Connector Manager (cmgr) service requires the ArkISPAuth authenticator, and exposes those service classes:</p> <ul> <li>ArkCmgrService - Connector Manager service</li> </ul>"},{"location":"sdk/services/#secrets-hub-service","title":"Secrets Hub service","text":"<p>The Secrets Hub (sechub) service requires the ArkISPAuth authenticator, and exposes those service classes:</p> <ul> <li>ArkSecHubConfigurationService - Configuration service</li> <li>ArkSecHubSecretsService - Secrets service</li> <li>ArkSecHubScansService - Scans service</li> <li>ArkSecHubSecretStoresService - Secret Stores service</li> <li>ArkSecHubServiceInfoService - Service Info service</li> <li>ArkSecHubFiltersService - Filter service</li> </ul>"},{"location":"sdk/services/#session-monitoring-service","title":"Session Monitoring service","text":"<p>The Session Monitoring (sm) service requires the ArkISPAuth authenticator, and exposes those service classes:</p> <ul> <li>ArkSMService - Session Monitoring service</li> </ul>"},{"location":"sdk/services/#uap","title":"UAP","text":"<p>The Unified Access Policies (uap) service requires the ArkISPAuth authenticator, and exposes those service classes: - ArkUAPService - Unified Access Policies service   - ArkUAPSCAService - Unified Access Policies SCA service   - ArkUAPSIADBService - Unified Access Policies SIA DB service   - ArkUAPSIAVMService - Unified Access Policies SIA VM service</p>"}]}