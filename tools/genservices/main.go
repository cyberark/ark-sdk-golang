package main

import (
	"bytes"
	"fmt"
	"go/build"
	"os"
	"path"
	"path/filepath"
	"sort"
	"strings"
)

func main() {
	moduleRoot, modulePath := mustFindModuleRootAndPath()
	servicesDir := filepath.Join(moduleRoot, "pkg", "services")

	// Collect import paths for packages under services/*
	var imports []string
	err := filepath.Walk(servicesDir, func(p string, info os.FileInfo, err error) error {
		if err != nil {
			// Skip unreadable paths
			return nil
		}
		if !info.IsDir() {
			return nil
		}
		if p == servicesDir {
			return nil // skip root "services" dir (anchor)
		}
		pattern := filepath.Join(p, "*.go")
		files, _ := filepath.Glob(pattern)
		hasNonTest := false
		for _, f := range files {
			if !strings.HasSuffix(f, "_test.go") {
				hasNonTest = true
				break
			}
		}
		if !hasNonTest {
			return nil
		}
		// Make sure it's importable
		if _, err := build.ImportDir(p, build.IgnoreVendor); err != nil {
			return nil
		}
		rel, err := filepath.Rel(moduleRoot, p)
		if err != nil {
			return nil
		}
		if strings.Contains(rel, "models") || strings.Contains(rel, "actions") {
			return nil // skip "models" / "actions" dirs
		}
		// TODO: Add validation for whether ServiceConfig and init func exists and give warning / abort if it doesnt
		// TODO: Run generators via pre-commit / PR to validate the ark_api and imports are up to date
		imp := fmt.Sprintf(`_ "%s/%s"`, modulePath, filepath.ToSlash(rel))
		imports = append(imports, imp)
		return nil
	})
	if err != nil {
		panic(err)
	}

	sort.Strings(imports)

	var buf bytes.Buffer
	buf.WriteString("// Code generated by genservices; DO NOT EDIT.\n")
	buf.WriteString("// Automatically generated imports for all SDK services.\n")
	buf.WriteString("// Each service can define a module init to register its config.\n")
	buf.WriteString("// The configuration will be automatically registered upon import from this file.\n")
	buf.WriteString("package api\n\n")
	buf.WriteString("import (\n")
	for _, imp := range imports {
		buf.WriteString("    " + imp + "\n")
	}
	buf.WriteString(")\n")
	if err := os.WriteFile(path.Join(moduleRoot, "pkg", "ark_api_services.go"), buf.Bytes(), 0o644); err != nil {
		panic(err)
	}
}

func mustFindModuleRootAndPath() (moduleRoot, modulePath string) {
	dir, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	for {
		data, err := os.ReadFile(filepath.Join(dir, "go.mod"))
		if err == nil {
			// parse module path
			lines := strings.Split(string(data), "\n")
			for _, line := range lines {
				line = strings.TrimSpace(line)
				if strings.HasPrefix(line, "module ") {
					mp := strings.TrimSpace(strings.TrimPrefix(line, "module "))
					if mp == "" {
						panic("module path is empty in go.mod")
					}
					return dir, mp
				}
			}
			panic("module line not found in go.mod")
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			panic("go.mod not found; run from within a Go module")
		}
		dir = parent
	}
}
